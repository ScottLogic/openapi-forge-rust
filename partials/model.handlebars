{{#if description}}
/**
* <summary>{{description}}</summary>
*/
{{/if}}
#[derive(Serialize, Deserialize, Debug)]
{{#ifEquals @root.cabi "true"}}
#[repr(C)]
{{/ifEquals}}
#[serde(rename_all = "camelCase")]
pub struct {{toClassName @key}} 
{
  {{#each properties}}
    {{#if description}}
    // <value>
    // {{description}}
    // <value>
    {{/if}}
    {{#if example}}
    // <example>
    // {{example}}
    // <example>
    {{/if}}
    {{~#ifContains ../required @key~}}
    {{setVar "is_required" true}}
    {{~else~}}
    {{setVar "is_required" false}}
    {{~/ifContains~}}
    pub {{toRustParamName @key}}: {{{safeTypeConvert this @root.is_required @root.cabi}}},
  {{/each}}
}

{{#ifEquals @root.cabi "true"}}
#[no_mangle]
pub extern "C" fn c{{toRustParamName @key}}_type_information() -> Box<ObjectTypeInformation> {
    let type_name = "{{toClassName @key}}".into();
    let {{#each properties}}{{#if @last}}mut{{/if}}{{/each}} map = HashMap::new();
    {{#each properties}}
      {{~#ifContains ../required @key~}}
        {{setVar "is_required" true}}
      {{~else~}}
        {{setVar "is_required" false}}
      {{~/ifContains~}}
    map.insert("{{toRustParamName @key}}".into(), "{{{safeTypeConvert this @root.is_required @root.cabi}}}".into());
    {{/each}}
    let type_information = ObjectTypeInformation { type_name, fields: map};
    Box::new(type_information)
}
{{/ifEquals}}
