{{#if description}}
/**
* <summary>{{description}}</summary>
*/
{{/if}}
#[derive(Serialize, Deserialize, Debug)]
{{#ifEquals @root.cabi "true"}}
#[repr(C)]
{{/ifEquals}}
pub struct {{toClassName @key}} 
{
  {{#each properties}}
    {{#if description}}
    // <value>
    // {{description}}
    // <value>
    {{/if}}
    {{#if example}}
    // <example>
    // {{example}}
    // <example>
    {{/if}}
    {{~#ifContains ../required @key~}}
    {{setVar "is_required" true}}
    {{~else~}}
    {{setVar "is_required" false}}
    {{~/ifContains~}}
    {{#ifNotEquals (toRustParamName @key) @key }}
    #[serde(rename = "{{@key}}")]
    {{/ifNotEquals}}
    pub {{toRustParamName @key}}: {{{safeTypeConvert this @root.is_required}}},
  {{/each}}
}

{{#ifEquals @root.cabi "true"}}
// We can pass the object by reference normally but with ffi, this indicates using *mut (mutable pointers) which we can avoid by passing values. 
#[no_mangle]
pub extern "C" fn c{{toRustParamName @key}}_verify(o: Box<ForgeResponse<{{toClassName @key}}>>) -> Box<ForgeResponse<{{toClassName @key}}>> {
    // Does nothing but references each field of the struct as a verification
    {{#each properties}}
    let _{{toRustParamName @key}} = &o.data.{{toRustParamName @key}};
    {{/each}}
    o
}
{{/ifEquals}}
