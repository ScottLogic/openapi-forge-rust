{{#ifEquals _options.[generator.cabi_testing] "true"}}
use abi_stable::std_types::RHashMap as HashMap;
{{/ifEquals}}
{{#ifNotEquals _options.[generator.cabi_testing] "true"}}
use std::collections::HashMap;
{{/ifNotEquals}}

{{#ifEquals _options.[generator.cabi_testing] "true"}}
use abi_stable::std_types::string::RString as String;
{{/ifEquals}}

use serde::{ Serialize, Deserialize };

// <summary>
// Represents an HTTP response.
// </summary>
#[derive(Serialize, Deserialize, Debug)]
{{#ifEquals _options.[generator.cabi_testing] "true"}}
#[repr(C)]
{{/ifEquals}}
pub struct ForgeResponse<T> {
    // <summary>
    // Gets the typed response.
    // </summary>
    pub data: T,

    // <summary>
    // Gets the HTTP status code.
    // </summary>
    pub status_code: u16,

    // <summary>
    // Gets the returned HTTP headers.
    // </summary>
    pub headers: HashMap<String,String>,
}

impl<T> ForgeResponse<T> {
    pub fn new(data: T, status_code: u16, headers: HashMap<String,String>) -> Self {
        Self {
            data,
            status_code,
            headers,
        }
    }
}