{{#ifEquals _options.[generator.cabi_testing] "true"}}
#![allow(unused_imports)]
use abi_stable::std_types::string::RString as String;
use abi_stable::std_types::RHashMap as HashMap;
use abi_stable::std_types::ROption as Option;
use abi_stable::std_types::vec::RVec as Vec;
use crate::response::ForgeResponse;
{{/ifEquals}}

use serde::{Serialize, Deserialize};

{{setVar "cabi" _options.[generator.cabi_testing]}}

{{#each components.schemas}}
{{> model}}
{{#unless @last}}

{{/unless}}
{{/each}}

{{#each components.inlineObjects}}
{{> model}}
{{#unless @last}}

{{/unless}}
{{/each}}

{{#ifEquals _options.[generator.cabi_testing] "true"}}
#[repr(C)]
#[derive(Debug)]
pub struct FFISafeTuple<T>(pub Box<ForgeResponse<T>>,pub String);

pub fn get_type_name<T>(_: &T) -> String {
    core::any::type_name::<T>().into()
}

#[repr(C)]
#[derive(Serialize)]
pub struct ObjectTypeInformation {
    pub type_name: String,
    pub fields: HashMap<String, String>
}

{{/ifEquals}}