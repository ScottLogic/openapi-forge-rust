{{#ifNotEquals _options.[generator.cabi_testing] "true"}}
const SERVERS: [&str, {{servers.length}}] =  [{{~#each servers~}}"{{url}}"{{#unless @last}},{{/unless}}{{~/each~}}];
{{/ifNotEquals}}
{{#ifEquals _options.[generator.cabi_testing] "true"}}
const SERVERS: [&str, 2] =  ["/e1", "/e2"];
{{/ifEquals}}

pub struct Configuration {
    pub base_path: String,
    pub bearer_token: Option<String>,
    pub selected_server_index: usize,
}

impl Configuration {
    pub fn new(base_path: &str) -> Self {
        Self {
            base_path: base_path.into(),
            bearer_token: None,
            selected_server_index: 0
          }
    }

    pub fn get_base_address(&self) -> String {
        self.base_path.to_owned() + SERVERS[self.selected_server_index]
    }
}

{{#ifEquals _options.[generator.cabi_testing] "true"}}
use abi_stable::std_types::string::RString;
#[no_mangle]
pub extern "C" fn c_config_new(base_path: RString) -> Box<Configuration>{
    Box::new(Configuration::new(&base_path))
}
{{/ifEquals}}